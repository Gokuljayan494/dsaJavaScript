/**
 * @param {number[]} nums
 * @param {number[]} queries
 * @return {number[]}
 */
// let nums = [4, 5, 2, 1];
// let queries = [3, 10, 21];

// nums = [2, 3, 4, 5];
// queries = [1];
// nums = [4, 5, 2, 1];
// queries = [3, 10, 21];
// nums = [736411, 184882, 914641, 37925, 214915];

// queries = [331244, 273144, 118983, 118252, 305688, 718089, 665450];
// nums = [4, 5, 2, 1];
// queries = [3, 10, 21];

// nums = [624082];
// queries = [972985, 564269, 607119, 693641, 787608, 46517, 500857, 140097];
// nums = [4, 5, 2, 1];
// queries = [3, 10, 21];
nums = [
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
];

queries = [
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
  1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000,
];
/**
 * @param {number[]} nums
 * @param {number[]} queries
 * @return {number[]}
 */

let prefixArray = [];
let arrNew = [];
let saveValue;
let savePrefixValue;

findMax = function (start, last, nums) {
  max = start;
  for (let j = start; j <= last; j++) {
    if (nums[max] < nums[j]) {
      max = j;
    }
  }
  return max;
};

swap = function (nums, maxValue, last) {
  temp = nums[maxValue];
  nums[maxValue] = nums[last];
  nums[last] = temp;

  return nums;
};
search = function (prefixArray, queries) {
  // here we are setting target as queries position

  for (let check = 0; check <= queries.length - 1; check++) {
    console.log(`queriesLength:${queries.length - 1}`);

    console.log(`check:${check}`);
    target = queries[check];
    start = 0;
    end = prefixArray.length - 1;
    savePrefixValue = -3;
    // console.log(queries[0] === queries[queries.length - 1]);
    // break;
    if (queries[0] === queries[queries.length - 1] && queries.length - 1 > 1) {
      //   break;

      //   arrNew = queries.map((el) => {
      //     console.log(el);
      //     queries[el] = 1000;
      //   });
      for (k = 0; k <= queries.length - 1; k++) {
        queries[k] = 1000;
      }
      arrNew = queries;
      return arrNew;
    }
    // nums = [4, 5, 2, 1];

    // 1,2,4,5

    // 1,3,7,12

    // queries = [3, 10, 21];
    while (start <= end) {
      console.log(`start:${start},end:${end}`);
      middle = Math.trunc((start + end) / 2);
      console.log(prefixArray[start] === prefixArray[middle]);

      console.log(`middle:${middle}`);
      console.log(prefixArray[middle] === target);
      console.log(queries[0]);
      console.log(`target:${target}`);

      // nums = [4, 5, 2, 1];
      // 1,2,4,5
      //   1,3,7,12
      // queries = [3, 10, 21];
      if (prefixArray[middle] === target) {
        // push to array
        console.log(`saveEquals:${middle}`);
        arrNew.push(middle + 1);
        start = prefixArray.length;
      }
      if (prefixArray[middle] < target) {
        console.log(`---------`);
        console.log(`---------`);
        console.log(arrNew);
        console.log(`middle:${middle}`);
        savePrefixValue = middle + 1;

        console.log(`savePrefix:${savePrefixValue}`);
        start = middle + 1;
      }
      if (prefixArray[middle] > target) {
        end = middle - 1;
        savePrefixValue = end + 1;
      }
    }

    if (savePrefixValue === -1) {
      savePrefixValue = 0;
    }
    console.log(`savePrefixValue:${savePrefixValue}`);

    if (savePrefixValue >= 0) {
      console.log(`----------`);
      console.log(`----------`);
      console.log(`----------`);
      console.log(savePrefixValue);
      arrNew.push(savePrefixValue);
    }
  }
  return arrNew;
};
var answerQueries = function (nums, queries) {
  // sort the array
  for (let i = 0; i <= nums.length - 1; i++) {
    last = nums.length - 1 - i;
    maxValue = findMax((start = 0), last, nums);

    swapArray = swap(nums, maxValue, last);
  }
  console.log(swapArray);
  //   prefix sum
  storePrefixValue = 0;
  prefixArray = [];
  for (let prefix = 0; prefix <= swapArray.length - 1; prefix++) {
    storePrefixValue = storePrefixValue + swapArray[prefix];
    prefixArray.push(storePrefixValue);
  }
  console.log(prefixArray);

  // binarySearch
  arrNew = [];
  searchvalue = search(prefixArray, queries);
  prefixArray = [];
  console.log(`searchValue:${searchvalue}`);
  if (searchvalue[0] === undefined) {
    searchvalue[0] = 0;
    console.log(searchvalue);
    return searchvalue;
  } else {
    return searchvalue;
  }
};

value = answerQueries(nums, queries);

console.log(value);
